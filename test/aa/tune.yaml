# cluster_name: hpt-cluster
# provider: {type: aws, region: eu-north-1, cache_stopped_nodes: False }
# auth: {ssh_user: ubuntu}
# min_workers: 7
# max_workers: 7
# upscaling_speed: 1.0
# available_node_types:
#   head_node:
#     node_config: {InstanceType: m5.large, 
#               ImageId: ami-0914547665e6a707c, 
#               BlockDeviceMappings: [{ DeviceName: /dev/sda1, 
#                                       Ebs: { VolumeSize: 100, VolumeType: gp3 } }] }
#   worker_nodes:
#     node_config: {InstanceType: m5.large, 
#               ImageId: ami-0914547665e6a707c, 
#               BlockDeviceMappings: [{ DeviceName: /dev/sda1, 
#                                       Ebs: { VolumeSize: 100, VolumeType: gp3 } }] }
# head_node_type: head_node
# setup_commands:
#   - sudo apt-get update
#   - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
#   - bash Miniconda3-latest-Linux-x86_64.sh -b
#   - echo 'export PATH="$HOME/miniconda3/bin:$PATH"' >> ~/.bashrc
#   - source ~/.bashrc
#   - conda init bash
#   - conda create -n pytorch_p39 -y
#   - conda activate pytorch_p39
#   - conda install -y python=3.10
#   - conda install -y -c conda-forge "ray-train"
#   - conda install -y -c conda-forge "ray-tune"
#   - conda install -y -c pytorch pytorch torchvision 
# An unique identifier for the head node and workers of this cluster.
cluster_name: hpt-cluster

# The maximum number of workers nodes to launch in addition to the head
# node.
min_workers: 0
max_workers: 75

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "rayproject/ray-ml:latest-cpu" # You can change this to latest-cpu if you don't need GPU support and want a faster startup
    # image: rayproject/ray:latest-cpu   # use this one if you don't need ML dependencies, it's faster to pull
    container_name: "ray_container"
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options:   # Extra options to pass into "docker run"
        - --ulimit nofile=65536:65536

    # Example of running a GPU head with CPU workers
    # head_image: "rayproject/ray-ml:latest-gpu"
    # Allow Ray to automatically detect GPUs

    # worker_image: "rayproject/ray-ml:latest-cpu"
    # worker_run_options: []

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5
# Cloud-provider specific configuration.
provider:
    type: aws
    region: eu-north-1
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: True # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    ray.head.default:
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: t3.large
            # Default AMI for us-west-2.
            # Check https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/_private/aws/config.py
            # for default images for other zones.
            ImageId: ami-0914547665e6a707c
            # You can provision additional disk space with a conf as follows
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 100
                      VolumeType: gp3
            # Additional options in the boto docs.
    ray.worker.default:  
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            IamInstanceProfile:
              Arn: arn:aws:iam::422901541742:instance-profile/ray-worker-v1
            InstanceType: t3.large
            # Default AMI for us-west-2.
            # Check https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/_private/aws/config.py
            # for default images for other zones.
            ImageId: ami-0914547665e6a707c
            BlockDeviceMappings:
              - DeviceName: /dev/sda1
                Ebs:
                    VolumeSize: 100
                    VolumeType: gp3

# Specify the node type of the head node (as configured above).
head_node_type: ray.head.default

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: 
  - sudo apt-get update
  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sudo sh get-docker.sh
  - sudo usermod -aG docker $USER
  - sudo systemctl restart docker -f

# List of shell commands to run to set up nodes.
setup_commands: 
  - sudo apt-get update
  # - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  # - bash Miniconda3-latest-Linux-x86_64.sh -b
  # - echo 'export PATH="$HOME/miniconda3/bin:$PATH"' >> ~/.bashrc
  # - source ~/.bashrc
  # - conda init bash
  # - conda activate base
  # - conda install -y python=3.10
  # - conda install -y -c conda-forge "ray-train"
  # - conda install -y -c conda-forge "ray-tune"
  # - conda install -y -c pytorch pytorch torchvision 
    # Note: if you're developing Ray, you probably want to create a Docker image that
    # has your Ray repo pre-cloned. Then, you can replace the pip installs
    # below with a git checkout <your_sha> (and possibly a recompile).
    # To run the nightly version of ray (as opposed to the latest), either use a rayproject docker image
    # that has the "nightly" (e.g. "rayproject/ray-ml:nightly-gpu") or uncomment the following line:
  - pip install -U "ray[data,train,tune,serve]"
  - pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    # - pip install -U "ray[default] @ https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml --dashboard-host=0.0.0.0

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076